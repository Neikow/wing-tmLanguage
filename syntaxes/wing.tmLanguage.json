{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Wing",
  "scopeName": "source.wing",
  "fileType": "",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#storage"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#types"
    },
    {
      "include": "#decorator"
    },
    {
      "include": "#numbers"
    }
  ],
  "repository": {
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.wing",
          "match": "(!=|\\|\\||\\*\\*|&&|==|<=|>=|=|<|>|\\*|%|\\||/|\\+|-|!)"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.wing",
          "match": "\\b(string|int|float|bool|complex|quat|char|string|array|map|num|iter|call|repr)\\b"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type.wing",
          "match": "\\b(type|const|var|final|flag|static|function|struct|object)\\b"
        }
      ]
    },
    "decorator": {
      "patterns": [
        {
          "name": "meta.decorator.wing",
          "match": "(@)([a-zA-Z][a-zA-Z0-9]*)",
          "captures": {
            "0": {
              "name": "entity.name.flag.wing"
            },
            "1": {
              "name": "punctuation.flag.wing"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.wing",
          "match": "\\b(if|else|while|for|in|try|catch|assert|use|import|as|return|void)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "(\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\\$))|(\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\b(?!\\$))|(\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\\$))|((?<!\\$)(?:(?:\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|(?:\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|(?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|(?:\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\b)|(?:\b[0-9][0-9_]*(\\.)(n)?\\B)|(?:\\B(\\.)[0-9][0-9_]*(n)?\b)|(?:\b[0-9][0-9_]*(n)?\b(?!\\.)))(?!\\$))"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.wing",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.wing",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.wing",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.wing",
              "match": "\\\\."
            }
          ]
        }
      ]
    }
  }
}